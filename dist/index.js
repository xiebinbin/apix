import"dotenv/config";import{serve as e}from"@hono/node-server";import{Hono as a}from"hono";import{PrismaClient as t}from"@prisma/client";import r from"ioredis";import s from"dayjs";import*as o from"crypto";const c=new t,i=new r(process.env.REDIS_URL);class n{static async getTotal(e){return await c.accessRecord.count({where:{packageName:e,expiredAt:{gte:s().toDate()}}})}static async createRecord(e,a){return!await c.accessRecord.findFirst({where:{uuid:e,expiredAt:{gte:s().toDate()}}})&&(await c.accessRecord.create({data:{uuid:e,packageName:a,expiredAt:s().add(20,"hours").toDate()}}),!0)}}const d=new a;d.use("*",(async(e,a)=>{const t=e.req.header("package-name");if(!t)return e.json({code:400,message:"package-name is required"},400);const r=e.req.header("uuid");return r?(e.set("packageName",t),e.set("uuid",r),a()):e.json({code:400,message:"uuid is required"},400)})),d.post("/api/access-record/create",(async e=>{const{packageName:a,uuid:t}=e.var,r=o.createHash("sha256").update(`${a}-${t}`).digest("hex");if("OK"!=await i.set(`limit-req:${r}`,"locked","PX",5e3,"NX"))return e.json({code:429,message:"Too many requests"},429);let s=!1;return await n.getTotal(a)<process.env.MAX_REQUEST_COUNT&&(s=await n.createRecord(t,a)),e.json({code:200,message:"success",data:{result:s}})}));const u=process.env.API_PORT;console.log(`Server is running on http://localhost:${u}`),e({fetch:d.fetch,port:u});
